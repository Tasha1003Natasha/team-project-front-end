{"version":3,"file":"static/js/90.c3ee0a4a.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/TestForm/TestForm.module.css?f066","webpack://react-homework-template/./src/components/TestCard/TestCard.module.css?ed2c","components/TestCard/TestCard.jsx","components/TestForm/TestForm.jsx","webpack://react-homework-template/./src/Pages/TestPage/TestPage.module.css?0cf4","Pages/TestPage/TestPage.jsx","redux/tests/test-selector.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"questionContainer\":\"TestForm_questionContainer__-SfcQ\",\"btnQuestions\":\"TestForm_btnQuestions__aCL5H\",\"testFooter\":\"TestForm_testFooter__VT1R1\",\"arrowBack\":\"TestForm_arrowBack__XN32v\",\"numberQuestion\":\"TestForm_numberQuestion__BSk8e\",\"active\":\"TestForm_active__AD08p\"};","// extracted by mini-css-extract-plugin\nexport default {\"questionText\":\"TestCard_questionText__rwS8o\",\"line\":\"TestCard_line__rrQlQ\",\"answersList\":\"TestCard_answersList__9zE7V\",\"answersItem\":\"TestCard_answersItem__aMePg\",\"radio\":\"TestCard_radio__TAiFJ\"};","// import { useEffect, useState } from 'react';\n// import style from './TestCard.module.css';\nimport { useSelector } from 'react-redux';\nimport { getTechTest, getTheoryTest } from '../../redux/tests/test-selector';\nimport style from './TestCard.module.css';\n\nconst TestCard = ({ index = 0 }) => {\n  let currentIndex = Number(index);\n\n  const testTech = useSelector(getTechTest);\n  const testTheory = useSelector(getTheoryTest);\n  // const nextBtn = document.getElementsByName('next');\n\n  return (\n    <>\n      {testTech[currentIndex] && (\n        <>\n          <p className={style.questionText}>\n            {testTech[currentIndex].question}\n          </p>\n          <hr className={style.line} />\n          {/* <p>{testTech[currentIndex]._id}</p> */}\n          <ul className={style.answersList}>\n            {testTech[currentIndex].answers.map((answer, ind) => {\n              return (\n                <li className={style.answersItem} key={ind}>\n                  <input\n                    className={style.radio}\n                    // style=\"background-color: #ff6b09\"\n                    name=\"r1\"\n                    type=\"radio\"\n                    value={answer}\n                    onClick={evt => {\n                      document.getElementsByName('next').disabled = 'false';\n                    }}\n                    defaultChecked={false}\n                  />\n                  {answer}\n                </li>\n              );\n            })}\n          </ul>\n        </>\n      )}\n\n      {testTheory[currentIndex] && (\n        <div>\n          <p>{testTheory[currentIndex].question}</p>\n          <ul>\n            {testTheory[currentIndex].answers.map((answer, ind) => {\n              return (\n                <>\n                  <li key={currentIndex}>\n                    <input\n                      name=\"r1\"\n                      type=\"radio\"\n                      value={answer}\n                      id={ind}\n                      key={ind}\n                    />\n                    {answer}\n                  </li>\n                </>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default TestCard;\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport style from './TestForm.module.css';\nimport { useSelector } from 'react-redux';\nimport { getTechTest, getTheoryTest } from '../../redux/tests/test-selector';\nimport { results } from 'redux/tests/tests-operations';\nimport { useDispatch } from 'react-redux';\nimport TestCard from '../TestCard/TestCard';\nimport Sprite from '../../images/icons/icons.svg';\n\nexport const TestForm = () => {\n  const screenWidth = window.screen.width;\n  console.log(screenWidth);\n  const [index, setIndex] = useState('0');\n  const [answer, setAnswer] = useState([]);\n  // const [active, setActive] = useState('true');\n  const dispatch = useDispatch();\n\n  const radioButton = document.getElementsByName('r1');\n\n  // nextBtn.disabled = true;\n\n  // console.log(nextBtn);\n\n  const testTech = useSelector(getTechTest);\n  const testTheory = useSelector(getTheoryTest);\n\n  const checkAnswer = radioButton => {\n    for (let i = 0; i < radioButton.length; i++) {\n      if (radioButton[i].checked && testTech[0]) {\n        const userAnswer = {\n          userAnswer: radioButton[i].value,\n          _id: testTech[Number(index)]._id,\n        };\n        unClick(radioButton[i]);\n\n        for (let i = 0; i < answer.length; i++) {\n          if (userAnswer._id === answer[i]._id) {\n            const index = answer.indexOf(answer[i]);\n\n            answer.splice(index, 1);\n          }\n        }\n\n        setAnswer([...answer, userAnswer]);\n      }\n      if (radioButton[i].checked && testTheory[0]) {\n        const userAnswer = {\n          userAnswer: radioButton[i].value,\n          _id: testTheory[Number(index)]._id,\n        };\n\n        for (let i = 0; i < answer.length; i++) {\n          if (userAnswer._id === answer[i]._id) {\n            const index = answer.indexOf(answer[i]);\n\n            answer.splice(index, 1);\n          }\n        }\n\n        setAnswer([...answer, userAnswer]);\n      }\n    }\n  };\n\n  const currentQuestionIndexBack = evt => {\n    checkAnswer(radioButton);\n    chechButton(radioButton);\n    const backIndex = Number(index) - 1;\n    if (backIndex > 0 && backIndex <= 12) {\n      setIndex(backIndex);\n    }\n    if (backIndex < 1) {\n      setIndex(0);\n    }\n  };\n\n  const currentQuestionIndexNext = evt => {\n    checkAnswer(radioButton);\n\n    const NextIndex = Number(index) + 1;\n    if (NextIndex > 0 && NextIndex <= 12) {\n      setIndex(NextIndex);\n      // setActive('true');\n    }\n    if (NextIndex < 0) {\n      setIndex(0);\n    }\n  };\n\n  const getResultsFunc = () => {\n    checkAnswer(radioButton);\n    dispatch(results(answer));\n  };\n\n  localStorage.setItem('userAnswers', JSON.stringify(answer));\n\n  const localStorageArrayAnswers = JSON.parse(\n    localStorage.getItem('userAnswers')\n  );\n  console.log(localStorageArrayAnswers);\n\n  const chechButton = radioButton => {\n    if (localStorageArrayAnswers.length) {\n      for (let i = 0; i < radioButton.length; i++) {\n        // console.log(radioButton[i]);\n        for (let j = 0; j < localStorageArrayAnswers.length; j++) {\n          if (\n            testTech[Number(index)]._id === localStorageArrayAnswers[j]._id &&\n            String(radioButton[i].value).length ===\n              String(localStorageArrayAnswers[j].userAnswer).len\n          ) {\n            radioButton[i].value === localStorageArrayAnswers[j].userAnswer\n              ? (radioButton[i].checked = true)\n              : (radioButton[i].checked = false);\n          }\n        }\n      }\n    }\n  };\n\n  const unClick = radioButton => {\n    radioButton.checked = false;\n  };\n\n  return (\n    <>\n      <div className={style.questionContainer}>\n        <p className={style.numberQuestion}>\n          Question <span className={style.active}>{Number(index) + 1}</span> /\n          12\n        </p>\n        <TestCard index={index} radioButton={radioButton} />\n      </div>\n      <div className={style.testFooter}>\n        <button\n          className={style.btnQuestions}\n          type=\"button\"\n          name=\"back\"\n          onClick={currentQuestionIndexBack}\n        >\n          <svg className={style.arrowBack} width={24} height={16}>\n            <use href={`${Sprite}#arrow`}></use>\n          </svg>\n          {screenWidth >= 768 && <span>Previous question</span>}\n        </button>\n        {Number(index) + 1 < 12 ? (\n          <button\n            className={style.btnQuestions}\n            type=\"button\"\n            name=\"next\"\n            onClick={currentQuestionIndexNext}\n          >\n            {screenWidth >= 768 && <span>Next question</span>}\n            <svg className={style.arrowNext} width={24} height={16}>\n              <use href={`${Sprite}#arrow`}></use>\n            </svg>\n          </button>\n        ) : (\n          <Link\n            className={style.btnQuestions}\n            to=\"/results\"\n            name=\"finish\"\n            onClick={getResultsFunc}\n          >\n            <span>Finish test</span>\n          </Link>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default TestForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"sectionTest\":\"TestPage_sectionTest__Bovcs\",\"hederTest\":\"TestPage_hederTest__x0z-N\",\"hederText\":\"TestPage_hederText__n+1xu\",\"closeBtn\":\"TestPage_closeBtn__5wq5H\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { getTechTest, getTheoryTest } from '../../redux/tests/test-selector';\n\nimport TestForm from '../../components/TestForm/TestForm';\nimport { Link } from 'react-router-dom';\nimport style from './TestPage.module.css';\n\nconst TestPage = () => {\n  const dispatch = useDispatch();\n  const testTech = useSelector(getTechTest);\n  const theoryTest = useSelector(getTheoryTest);\n  const nextBtn = document.getElementsByName('next');\n  nextBtn.disabled = true;\n\n  const hendlerCloseTest = () => {\n    const test = [];\n    dispatch(testTech(test));\n    dispatch(theoryTest(test));\n  };\n\n  return (\n    <>\n      <section className={style.sectionTest}>\n        <div className={style.hederTest}>\n          {testTech[0] ? (\n            <p className={style.hederText}>[QA_technical&shy;_training]</p>\n          ) : (\n            <p className={style.hederTest}>[Testing&shy;theory_]</p>\n          )}\n\n          <Link\n            className={style.closeBtn}\n            to=\"/\"\n            type=\"button\"\n            onClick={hendlerCloseTest}\n          >\n            Close test\n          </Link>\n        </div>\n        <TestForm nextBtn={nextBtn} />\n      </section>\n    </>\n  );\n};\n\nexport default TestPage;\n","export const getTechTest = state => state.test.testTech;\nexport const getTheoryTest = state => state.test.testTheory;\nexport const getCurrectAnswer = state => state.test.results.correct;\nexport const getIncurrectAnswer = state => state.test.results.incorrect;\n"],"names":["index","currentIndex","Number","testTech","useSelector","getTechTest","testTheory","getTheoryTest","className","style","question","answers","map","answer","ind","name","type","value","onClick","evt","document","getElementsByName","disabled","defaultChecked","id","screenWidth","window","screen","width","console","log","useState","setIndex","setAnswer","dispatch","useDispatch","radioButton","checkAnswer","i","length","checked","userAnswer","_id","unClick","indexOf","splice","localStorage","setItem","JSON","stringify","localStorageArrayAnswers","parse","getItem","chechButton","j","String","len","backIndex","height","href","Sprite","NextIndex","to","results","theoryTest","nextBtn","test","state","getCurrectAnswer","correct","getIncurrectAnswer","incorrect"],"sourceRoot":""}